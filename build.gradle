plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.karasu256'

def versionFile = file('version.properties')
def versionProps = new Properties()

def initializeWithGitVersion() {
    def gitVersion = fetchLatestGitVersion()
    versionProps.setProperty('major', gitVersion[0].toString())
    versionProps.setProperty('minor', gitVersion[1].toString())
    versionProps.setProperty('patch', gitVersion[2].toString())
    println "Initialized version from Git: ${gitVersion[0]}.${gitVersion[1]}.${gitVersion[2]}"
    return gitVersion
}

if (versionFile.exists()) {
    versionFile.withInputStream { versionProps.load(it) }
} else {
    def gitVersion = initializeWithGitVersion()
    versionFile.createNewFile()
    versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
}

def buildNumberFile = file('build-number.properties')
def buildProps = new Properties()

if (buildNumberFile.exists()) {
    buildNumberFile.withInputStream { buildProps.load(it) }
} else {
    buildProps.setProperty('buildNumber', '0')
    buildNumberFile.createNewFile()
}

def majorVersion = versionProps.getProperty('major').toInteger()
def minorVersion = versionProps.getProperty('minor').toInteger()
def patchVersion = versionProps.getProperty('patch').toInteger()
def buildNumber = buildProps.getProperty('buildNumber').toInteger()

// バージョン形式の変更
version = "${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}"

// Minecraft（MC）バージョンを定義
def mcVersion = "1.21.3"

def fetchLatestGitVersion() {
    def latestVersion = [0, 0, 1] // デフォルトバージョンを0.0.1に変更
    try {
        def process = "git ls-remote --tags https://github.com/Karasu-Lab/KarasuCommandAPI.git".execute()
        def tags = process.text.readLines()
            .collect { it.split()[1].replaceAll("refs/tags/v", "") }
            .findAll { it =~ /^\d+\.\d+\.\d+$/ }
        
        if (tags) {
            def latest = tags.last()
            latestVersion = latest.tokenize('.').collect { it.toInteger() }
            println "Found latest version tag: v${latest}"
            
            // 現在のバージョンと新しいバージョンを比較
            def currentVersion = [
                versionProps.getProperty('major', '0').toInteger(),
                versionProps.getProperty('minor', '0').toInteger(),
                versionProps.getProperty('patch', '0').toInteger()
            ]
            
            if (latestVersion != currentVersion) {
                println "Version changed from ${currentVersion.join('.')} to ${latestVersion.join('.')}"
                // ビルドナンバーをリセット
                buildProps.setProperty('buildNumber', '0')
                buildProps.store(buildNumberFile.newWriter(), null)
            }
        } else {
            println "No version tags found. Using default version: ${latestVersion.join('.')}"
        }
    } catch (Exception e) {
        println "Warning: Failed to fetch version from Git: ${e.message}"
        println "Using default version: ${latestVersion.join('.')}"
    }
    return latestVersion
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'karasu-command-api'
            
            version = project.version.toString()
            
            pom {
                name = 'KarasuCommandAPI'
                description = 'A Minecraft plugin that provides command API'
                url = 'https://github.com/Karasu-Lab/KarasuCommandAPI'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'hashibutogarasu'
                        name = 'Hashibutogarasu'
                        email = 'karasu@karasu256.com'
                        url = 'https://github.com/Hashibutogarasu'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/Karasu-Lab/KarasuCommandAPI.git'
                    developerConnection = 'scm:git:ssh://github.com/Karasu-Lab/KarasuCommandAPI.git'
                    url = 'https://github.com/Karasu-Lab/KarasuCommandAPI'
                }
            }
        }
    }
    repositories {
        maven {
            name = "Local"
            url = layout.buildDirectory.dir('repos/bundles')
        }
        
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Karasu-Lab/KarasuCommandAPI")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signing.key")
    def signingPassword = findProperty("signing.password")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        def signingKeyId = findProperty("signing.keyId")
        def signingSecretKeyRingFile = findProperty("signing.secretKeyRingFile")
        
        if (signingKeyId && signingPassword && signingSecretKeyRingFile) {
            def keyFile = new File(signingSecretKeyRingFile.toString().replaceAll('"', ''))
            useInMemoryPgpKeys(signingKeyId, keyFile.text, signingPassword)
        } else {
            println "署名情報が不完全です - 署名はスキップされます"
        }
    }
    
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

tasks.withType(PublishToMavenRepository) {
    mustRunAfter tasks.withType(Sign)
}

tasks.register('buildJar', Jar) {
    archiveBaseName.set('KarasuCommandAPI')
    from sourceSets.main.output
    dependsOn configurations.compileClasspath
}

tasks.named('build') {
    dependsOn 'sourcesJar', 'javadocJar', 'syncVersionWithGit'
    finalizedBy 'incrementBuildNumber'
}

tasks.register('incrementBuildNumber') {
    group = 'build'
    description = 'Increment build number after successful build'
    
    doLast {
        def currentBuildNumber = buildProps.getProperty('buildNumber').toInteger()
        buildProps.setProperty('buildNumber', (currentBuildNumber + 1).toString())
        buildNumberFile.withOutputStream { buildProps.store(it, null) }
        println "Build number incremented to: ${currentBuildNumber + 1}"
    }
}

tasks.register('updatePluginVersion') {
    group = 'build'
    description = 'Update plugin.yml version from project version'
    
    doLast {
        def pluginYml = file('src/main/resources/plugin.yml')
        def lines = pluginYml.readLines()
        def updatedLines = lines.collect { line ->
            if (line.trim().startsWith('version:')) {
                return "version: '${project.version}'"
            }
            return line
        }
        pluginYml.text = updatedLines.join('\n')
    }
}

tasks.named('updatePluginVersion') {
    dependsOn 'syncVersionWithGit'
}

tasks.named('processResources') {
    dependsOn 'updatePluginVersion'
}

// Gitブランチとコミットハッシュを取得する関数
def getGitBranch() {
    try {
        def process = "git rev-parse --abbrev-ref HEAD".execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            return process.text.trim()
        } else {
            return "unknown"
        }
    } catch (Exception e) {
        return "unknown"
    }
}

def getGitCommitHash() {
    try {
        def process = "git rev-parse --short HEAD".execute()
        process.waitFor()
        if (process.exitValue() == 0) {
            return process.text.trim()
        } else {
            return "unknown"
        }
    } catch (Exception e) {
        return "unknown"
    }
}

// サイレントビルドタスク（ビルド番号を上げない）を追加
tasks.register('silentBuild') {
    group = 'build'
    description = 'ビルド番号を上げずにビルドを行う'
    
    // タスクの依存関係として明示的にupdatePluginVersionを追加
    dependsOn 'compileJava', 'processResources', 'classes', 'sourcesJar', 'javadocJar', 'updatePluginVersion'
    
    doLast {
        println "サイレントビルドを実行中..."
        println "現在のバージョン: ${project.version} (ビルド番号は変更されません)"
    }
    
    finalizedBy 'silentJar', 'verifyJarOutput'
}

// サイレントビルド用のJarタスク
tasks.register('silentJar', Jar) {
    group = 'build'
    description = 'ビルド番号を上げずにJARファイルを作成する'
    
    dependsOn 'updatePluginVersion'
    
    doFirst {
        def gitBranch = getGitBranch()
        def gitCommit = getGitCommitHash()
        archiveFileName = "${project.name}-${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}-${mcVersion}-${gitBranch}-${gitCommit}-silent.jar"
    }
    
    archiveBaseName.set(project.name)
    from sourceSets.main.output
    dependsOn configurations.compileClasspath
    
    // 確実に出力されるように設定
    destinationDirectory = file("${buildDir}/libs")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// jarファイルの出力確認用タスクを追加
tasks.register('verifyJarOutput') {
    group = 'verification'
    description = 'JARファイルが正しく生成されたことを確認する'
    
    doLast {
        def libsDir = file("${buildDir}/libs")
        def jarFiles = libsDir.listFiles()?.findAll { it.name.endsWith('.jar') } ?: []
        
        if (jarFiles.isEmpty()) {
            throw new GradleException("JARファイルが生成されませんでした。ビルドに失敗しています。")
        } else {
            println "生成されたJARファイル:"
            jarFiles.each { println " - ${it.name} (${it.length()} bytes)" }
        }
    }
}

tasks.named('build') {
    dependsOn 'sourcesJar', 'javadocJar', 'syncVersionWithGit'
    finalizedBy 'incrementBuildNumber', 'verifyJarOutput'
}

tasks.named('processResources') {
    dependsOn 'updatePluginVersion'
}

tasks.register('syncVersionWithGit') {
    group = 'build'
    description = 'Synchronize version with GitHub release tags'
    
    doLast {
        def gitVersion = fetchLatestGitVersion()
        versionProps.setProperty('major', gitVersion[0].toString())
        versionProps.setProperty('minor', gitVersion[1].toString())
        versionProps.setProperty('patch', gitVersion[2].toString())
        versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
        
        project.version = "${gitVersion[0]}.${gitVersion[1]}.${gitVersion[2]}.${buildNumber}"
        println "Version synchronized with Git: ${project.version}"
    }
}

tasks.named('build') {
    dependsOn 'sourcesJar', 'javadocJar', 'syncVersionWithGit'
    finalizedBy 'incrementBuildNumber'
}

// プラグインディレクトリ作成タスクを追加
tasks.register('createPluginsDir') {
    group = 'build'
    description = 'プラグインディレクトリを作成する'
    
    doLast {
        def pluginsDir = file('run/plugins')
        if (!pluginsDir.exists()) {
            pluginsDir.mkdirs()
            println "'run/plugins' ディレクトリを作成しました"
        }
    }
}

// サイレントJARをプラグインディレクトリにコピーするタスク
tasks.register('copySilentJar', Copy) {
    group = 'build'
    description = 'サイレントビルドしたJARファイルをプラグインディレクトリにコピーする'
    
    dependsOn 'silentJar', 'createPluginsDir'
    
    doFirst {
        fileTree(dir: 'run/plugins').matching {
            include "**/${project.name}-*.jar"
        }.each { file ->
            logger.lifecycle("古いJARを削除: ${file.name}")
            file.delete()
        }
    }
    
    from silentJar
    into 'run/plugins'
    
    doLast {
        println "サイレントビルドのJARを 'run/plugins' ディレクトリにコピーしました"
    }
}

tasks.named('build').configure {
    finalizedBy 'verifyJarOutput'
}

// サイレントビルドとrunServerの連携を設定
tasks.register('runServer', JavaExec) {
    group = 'run'
    description = 'サーバーを起動する（サイレントビルド後）'
    
    dependsOn 'silentBuild', 'copySilentJar'
    
    doFirst {
        println "サーバーを起動します..."
    }
    
    mainClass = 'io.papermc.paper.PaperMain'
    classpath = files('run/paper.jar')
    
    workingDir = file('run')
    standardInput = System.in
    
    jvmArgs = ['-Xms2G', '-Xmx2G']
}

// processResourcesタスクの設定を明示的に行う
tasks.named('processResources') {
    mustRunAfter 'updatePluginVersion'
}

tasks.named('updatePluginVersion') {
    mustRunAfter 'incrementBuildNumber'
}

// ビルド失敗時のビルド番号のデクリメント処理を追加
tasks.register('decrementBuildNumber') {
    group = 'build'
    description = 'ビルドが失敗または中断されたときにビルド番号を戻す'
    
    doLast {
        def currentBuildNumber = buildProps.getProperty('buildNumber').toInteger()
        if (currentBuildNumber > 1) {
            def newBuildNumber = currentBuildNumber - 1
            buildProps.setProperty('buildNumber', newBuildNumber.toString())
            buildNumberFile.withOutputStream { buildProps.store(it, null) }
            println "ビルド番号を ${newBuildNumber} に戻しました（ビルド失敗または中断）"
        } else {
            println "ビルド番号は最小値の1のままです"
        }
    }
}

// タスク失敗時のビルド番号デクリメント処理
gradle.taskGraph.afterTask { task, TaskState state ->
    if (task.name == 'incrementBuildNumber' && (state.failure || state.skipped)) {
        tasks.decrementBuildNumber.execute()
    }
}

gradle.buildFinished { result ->
    if (!result.failure && gradle.startParameter.taskNames.contains('build')) {
        if (result.action == 'cancelled' || result.action == 'interrupted') {
            tasks.decrementBuildNumber.execute()
        }
    }
}